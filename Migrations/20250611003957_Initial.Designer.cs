// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TypicalTechTools.Models.Data;

#nullable disable

namespace TypicalTechTools.Migrations
{
    [DbContext(typeof(TypicalTechToolsDBContext))]
    [Migration("20250611003957_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TypicalTechTools.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "$2a$11$mBVWNIeL3o8VCqJlOUy0euC1n2qf0xlTX5R87uM/26VCD.IxX/Wh6",
                            Role = "ADMIN",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TypicalTechTools.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentText = "This is a great product. Highly Recommended!",
                            CreatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4405),
                            ProductId = 12345,
                            SessionId = "session-001"
                        },
                        new
                        {
                            CommentId = 2,
                            CommentText = "Not worth the excessive price. Stick with a cheaper generic one.",
                            CreatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4478),
                            ProductId = 12350,
                            SessionId = "session-002"
                        },
                        new
                        {
                            CommentId = 3,
                            CommentText = "A great budget buy. As good as some of the expensive alternatives.",
                            CreatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4486),
                            ProductId = 12345,
                            SessionId = "session-003"
                        },
                        new
                        {
                            CommentId = 4,
                            CommentText = "Total garbage. Never buying this brand again. ",
                            CreatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4491),
                            ProductId = 12347,
                            SessionId = "session-004"
                        });
                });

            modelBuilder.Entity("TypicalTechTools.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 12345,
                            ProductDescription = " bluetooth headphones with fair battery life and a 1 month warranty",
                            ProductName = " Generic Headphones",
                            ProductPrice = 84.989999999999995,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4499)
                        },
                        new
                        {
                            ProductId = 12346,
                            ProductDescription = " bluetooth headphones with good battery life and a 6 month warranty",
                            ProductName = " Expensive Headphones",
                            ProductPrice = 149.99000000000001,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4501)
                        },
                        new
                        {
                            ProductId = 12347,
                            ProductDescription = " bluetooth headphones with good battery life and a 12 month warranty",
                            ProductName = " Name Brand Headphones",
                            ProductPrice = 199.99000000000001,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4502)
                        },
                        new
                        {
                            ProductId = 12348,
                            ProductDescription = " simple bluetooth pointing device",
                            ProductName = " Generic Wireless Mouse",
                            ProductPrice = 39.990000000000002,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4503)
                        },
                        new
                        {
                            ProductId = 12349,
                            ProductDescription = " mouse and keyboard wired combination",
                            ProductName = " Logitach Mouse and Keyboard",
                            ProductPrice = 73.989999999999995,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4503)
                        },
                        new
                        {
                            ProductId = 12350,
                            ProductDescription = " quality wireless mouse",
                            ProductName = " Logitach Wireless Mouse",
                            ProductPrice = 149.99000000000001,
                            UpdatedDate = new DateTime(2025, 6, 11, 10, 39, 56, 301, DateTimeKind.Local).AddTicks(4504)
                        });
                });

            modelBuilder.Entity("TypicalTechTools.Models.Comment", b =>
                {
                    b.HasOne("TypicalTechTools.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TypicalTechTools.Models.Product", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
